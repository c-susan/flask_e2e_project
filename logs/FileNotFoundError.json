{"event_id":"2b076f9519bc4b15900609885be61bfd","project":4506373742657536,"release":null,"dist":null,"platform":"python","message":"","datetime":"2023-12-12T17:34:38+00:00","tags":[["browser","Google Chrome 118"],["browser.name","Google Chrome"],["client_os.name","macOS"],["device","Mac"],["device.family","Mac"],["environment","production"],["handled","no"],["level","error"],["mechanism","flask"],["runtime","CPython 3.10.12"],["runtime.name","CPython"],["server_name","08c2d5b9da57"],["transaction","air"],["url","http://127.0.0.1:5000/air"]],"_meta":{"exception":{"values":{"0":{"stacktrace":{"frames":{"0":{"vars":{"environ":{"":{"len":38}}}},"5":{"vars":{"":{"len":51}}},"6":{"vars":{"kwds":{"":{"len":48}}}},"7":{"vars":{"kwds":{"":{"len":47}},"options":{"":{"len":41}}}},"9":{"vars":{"":{"len":13}}}}}}}},"request":{"headers":{"3":{"1":{"":{"rem":[["!config","s"]]}}}}}},"_metrics":{"bytes.ingested.event":13571,"bytes.stored.event":17413},"contexts":{"browser":{"name":"Google Chrome","version":"118","type":"browser"},"client_os":{"name":"macOS","type":"os"},"device":{"family":"Mac","model":"Mac","brand":"Apple","type":"device"},"runtime":{"name":"CPython","version":"3.10.12","build":"3.10.12 (main, Jun 13 2023, 15:57:17) [GCC 8.3.0]","type":"runtime"},"trace":{"trace_id":"f14404a1584f4e09b23a3b3a1624f4c8","span_id":"ab632a353bb10f65","op":"http.server","status":"unknown","client_sample_rate":1.0,"sampled":true,"type":"trace"}},"culprit":"air","environment":"production","exception":{"values":[{"type":"FileNotFoundError","value":"[Errno 2] No such file or directory: '/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","stacktrace":{"frames":[{"function":"wsgi_app","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.10/site-packages/flask/app.py","lineno":1455,"pre_context":["        ctx = self.request_context(environ)","        error: BaseException | None = None","        try:","            try:","                ctx.push()"],"context_line":"                response = self.full_dispatch_request()","post_context":["            except Exception as e:","                error = e","                response = self.handle_exception(e)","            except:  # noqa: B001","                error = sys.exc_info()[1]"],"in_app":false,"vars":{"ctx":"<RequestContext 'http://127.0.0.1:5000/air' [GET] of app>","e":"FileNotFoundError(2, 'No such file or directory')","environ":{"REQUEST_METHOD":"'GET'","SERVER_SOFTWARE":"'Werkzeug/3.0.1'","werkzeug.socket":"<socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('172.17.0.2', 5000), raddr=('172.17.0.1', 40196)>","wsgi.errors":"<_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>","wsgi.input":"<_io.BufferedReader name=6>","wsgi.multiprocess":"False","wsgi.multithread":"True","wsgi.run_once":"False","wsgi.url_scheme":"'http'","wsgi.version":["1","0"]},"error":"FileNotFoundError(2, 'No such file or directory')","self":"<Flask 'app'>","start_response":"functools.partial(<function _sentry_start_response at 0x7da570bdae60>, <function WSGIRequestHandler.run_wsgi.<locals>.start_response at 0x7da5667b20e0>, <Transaction(name='air', op='http.server', trace_id='f14404a1584f4e09b23a3b3a1624f4c8', span_id='ab632a353bb10f65', parent_span_id=None, sampled=True, source='component')>)"}},{"function":"full_dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.10/site-packages/flask/app.py","lineno":869,"pre_context":["            request_started.send(self, _async_wrapper=self.ensure_sync)","            rv = self.preprocess_request()","            if rv is None:","                rv = self.dispatch_request()","        except Exception as e:"],"context_line":"            rv = self.handle_user_exception(e)","post_context":["        return self.finalize_request(rv)","","    def finalize_request(","        self,","        rv: ft.ResponseReturnValue | HTTPException,"],"in_app":false,"vars":{"rv":"None","self":"<Flask 'app'>"}},{"function":"full_dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.10/site-packages/flask/app.py","lineno":867,"pre_context":["","        try:","            request_started.send(self, _async_wrapper=self.ensure_sync)","            rv = self.preprocess_request()","            if rv is None:"],"context_line":"                rv = self.dispatch_request()","post_context":["        except Exception as e:","            rv = self.handle_user_exception(e)","        return self.finalize_request(rv)","","    def finalize_request("],"in_app":false,"vars":{"rv":"None","self":"<Flask 'app'>"}},{"function":"dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.10/site-packages/flask/app.py","lineno":852,"pre_context":["            and req.method == \"OPTIONS\"","        ):","            return self.make_default_options_response()","        # otherwise dispatch to the handler for that endpoint","        view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]"],"context_line":"        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)","post_context":["","    def full_dispatch_request(self) -> Response:","        \"\"\"Dispatches the request and on top of that performs request","        pre and postprocessing as well as HTTP exception catching and","        error handling."],"in_app":false,"vars":{"req":"<Request 'http://127.0.0.1:5000/air' [GET]>","rule":"<Rule '/air' (GET, HEAD, OPTIONS) -> air>","self":"<Flask 'app'>","view_args":{}}},{"function":"air","module":"__main__","filename":"app.py","abs_path":"/app/app.py","lineno":58,"pre_context":["def index():","    return render_template('index.html')","","@app.route('/air')","def air():"],"context_line":"    df = pd.read_csv('/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv').sample(50)","post_context":["    data = df.values","    return render_template('air.html', data=data)","","","@app.route('/sql')"],"in_app":true,"vars":{}},{"function":"read_csv","module":"pandas.io.parsers.readers","filename":"pandas/io/parsers/readers.py","abs_path":"/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py","lineno":948,"pre_context":["        defaults={\"delimiter\": \",\"},","        dtype_backend=dtype_backend,","    )","    kwds.update(kwds_defaults)",""],"context_line":"    return _read(filepath_or_buffer, kwds)","post_context":["","","# iterator=True -> TextFileReader","@overload","def read_table("],"in_app":false,"vars":{"converters":"None","delimiter":"None","dtype":"None","engine":"None","filepath_or_buffer":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","header":"'infer'","index_col":"None","names":"<no_default>","sep":"<no_default>","usecols":"None"}},{"function":"_read","module":"pandas.io.parsers.readers","filename":"pandas/io/parsers/readers.py","abs_path":"/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py","lineno":611,"pre_context":["","    # Check for duplicates in names.","    _validate_names(kwds.get(\"names\", None))","","    # Create the parser."],"context_line":"    parser = TextFileReader(filepath_or_buffer, **kwds)","post_context":["","    if chunksize or iterator:","        return parser","","    with parser:"],"in_app":false,"vars":{"chunksize":"None","filepath_or_buffer":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","iterator":"False","kwds":{"converters":"None","delimiter":"','","dtype":"None","engine":"'c'","false_values":"None","header":"'infer'","index_col":"None","names":"None","true_values":"None","usecols":"None"},"nrows":"None"}},{"function":"__init__","module":"pandas.io.parsers.readers","filename":"pandas/io/parsers/readers.py","abs_path":"/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py","lineno":1448,"pre_context":["","        if \"has_index_names\" in kwds:","            self.options[\"has_index_names\"] = kwds[\"has_index_names\"]","","        self.handles: IOHandles | None = None"],"context_line":"        self._engine = self._make_engine(f, self.engine)","post_context":["","    def close(self) -> None:","        if self.handles is not None:","            self.handles.close()","        self._engine.close()"],"in_app":false,"vars":{"dialect":"None","engine":"'c'","engine_specified":"True","f":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","kwds":{"converters":"None","delimiter":"','","dtype":"None","false_values":"None","header":"0","index_col":"None","names":"None","skipinitialspace":"False","true_values":"None","usecols":"None"},"options":{"delimiter":"','","doublequote":"True","escapechar":"None","header":"0","index_col":"None","lineterminator":"None","names":"None","quotechar":"'\"'","quoting":"0","skipinitialspace":"False"},"self":"<pandas.io.parsers.readers.TextFileReader object at 0x7da56669a440>"}},{"function":"_make_engine","module":"pandas.io.parsers.readers","filename":"pandas/io/parsers/readers.py","abs_path":"/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py","lineno":1705,"pre_context":["                # c engine can decode utf-8 bytes, adding TextIOWrapper makes","                # the c-engine especially for memory_map=True far slower","                is_text = False","                if \"b\" not in mode:","                    mode += \"b\""],"context_line":"            self.handles = get_handle(","post_context":["                f,","                mode,","                encoding=self.options.get(\"encoding\", None),","                compression=self.options.get(\"compression\", None),","                memory_map=self.options.get(\"memory_map\", False),"],"in_app":false,"vars":{"engine":"'c'","f":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","is_text":"True","mapping":{"c":"<class 'pandas.io.parsers.c_parser_wrapper.CParserWrapper'>","pyarrow":"<class 'pandas.io.parsers.arrow_parser_wrapper.ArrowParserWrapper'>","python":"<class 'pandas.io.parsers.python_parser.PythonParser'>","python-fwf":"<class 'pandas.io.parsers.python_parser.FixedWidthFieldParser'>"},"mode":"'r'","self":"<pandas.io.parsers.readers.TextFileReader object at 0x7da56669a440>"}},{"function":"get_handle","module":"pandas.io.common","filename":"pandas/io/common.py","abs_path":"/usr/local/lib/python3.10/site-packages/pandas/io/common.py","lineno":863,"pre_context":["    elif isinstance(handle, str):","        # Check whether the filename is to be opened in binary mode.","        # Binary mode does not support 'encoding' and 'newline'.","        if ioargs.encoding and \"b\" not in ioargs.mode:","            # Encoding"],"context_line":"            handle = open(","post_context":["                handle,","                ioargs.mode,","                encoding=ioargs.encoding,","                errors=errors,","                newline=\"\","],"in_app":false,"vars":{"compression":"None","encoding":"'utf-8'","errors":"'strict'","handle":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","ioargs":"IOArgs(filepath_or_buffer='/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv', encoding='utf-8', mode='r', compression={'method': None}, should_close=False)","is_text":"True","memory_map":"False","mode":"'r'","path_or_buf":"'/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'","storage_options":"None"}}]},"mechanism":{"type":"flask","handled":false,"meta":{"errno":{"number":2}}}}]},"extra":{"sys.argv":["app.py"]},"fingerprint":["{{ default }}"],"grouping_config":{"enhancements":"eJybzDRxc15qeXFJZU6qlZGBkbGugaGuoeEEAHJMCAM","id":"newstyle:2023-01-11"},"hashes":["7903056ad9ec2b5ee929bc41a7c1d1c9","a05ebba37f861af2ee690ecc38153e41"],"ingest_path":[{"version":"23.11.2","public_key":"XE7QiyuNlja9PZ7I9qJlwQotzecWrUIN91BAO7Q5R38"}],"key_id":"3530147","level":"error","location":"app.py","logger":"","metadata":{"display_title_with_tree_label":false,"filename":"app.py","function":"air","in_app_frame_mix":"mixed","type":"FileNotFoundError","value":"[Errno 2] No such file or directory: '/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv'"},"modules":{"authlib":"1.2.1","blinker":"1.7.0","cachelib":"0.10.2","cachetools":"5.3.2","certifi":"2023.11.17","cffi":"1.16.0","charset-normalizer":"3.3.2","click":"8.1.7","cryptography":"41.0.7","flask":"3.0.0","flask-session":"0.5.0","flask-sqlalchemy":"3.1.1","google-auth":"2.25.2","google-auth-httplib2":"0.1.1","google-auth-oauthlib":"1.1.0","greenlet":"3.0.2","gunicorn":"21.2.0","httplib2":"0.22.0","idna":"3.6","itsdangerous":"2.1.2","jinja2":"3.1.2","markupsafe":"2.1.3","mysql-connector-python":"8.2.0","numpy":"1.26.2","oauth2client":"4.1.3","oauthlib":"3.2.2","packaging":"23.2","pandas":"2.1.4","pip":"23.0.1","protobuf":"4.21.12","pyasn1":"0.5.1","pyasn1-modules":"0.3.0","pycparser":"2.21","pymysql":"1.1.0","pyparsing":"3.1.1","python-dateutil":"2.8.2","python-dotenv":"1.0.0","pytz":"2023.3.post1","requests":"2.31.0","requests-oauthlib":"1.3.1","rsa":"4.9","sentry-sdk":"1.39.0","setuptools":"65.5.1","six":"1.16.0","sqlalchemy":"2.0.23","typing_extensions":"4.9.0","tzdata":"2023.3","urllib3":"2.1.0","werkzeug":"3.0.1","wheel":"0.40.0"},"nodestore_insert":1702402483.715494,"received":1702402479.027692,"request":{"url":"http://127.0.0.1:5000/air","method":"GET","headers":[["Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],["Accept-Encoding","gzip, deflate, br"],["Accept-Language","en-US,en;q=0.9"],["Cookie","[Filtered]"],["Host","127.0.0.1:5000"],["Referer","https://5000-cs-1039191608401-default.cs-us-east1-vpcf.cloudshell.dev/"],["Sec-Ch-Ua","\"Chromium\";v=\"118\", \"Google Chrome\";v=\"118\", \"Not=A?Brand\";v=\"99\""],["Sec-Ch-Ua-Mobile","?0"],["Sec-Ch-Ua-Platform","\"macOS\""],["Sec-Fetch-Dest","document"],["Sec-Fetch-Mode","navigate"],["Sec-Fetch-Site","same-origin"],["Sec-Fetch-User","?1"],["Upgrade-Insecure-Requests","1"],["User-Agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"],["X-Forwarded-Host","5000-cs-1039191608401-default.cs-us-east1-vpcf.cloudshell.dev"]],"env":{"SERVER_NAME":"0.0.0.0","SERVER_PORT":"5000"}},"sdk":{"name":"sentry.python.flask","version":"1.39.0","integrations":["argv","atexit","dedupe","excepthook","flask","logging","modules","sqlalchemy","stdlib","threading"],"packages":[{"name":"pypi:sentry-sdk","version":"1.39.0"}]},"timestamp":1702402478.901344,"title":"FileNotFoundError: [Errno 2] No such file or directory: '/home/susan_chen/flask_e2e_project/data/cleaned_air_quality...","transaction":"air","transaction_info":{"source":"component"},"type":"error","version":"7"}