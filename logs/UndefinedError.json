{"event_id":"e08b60068d1141c191643c492f0e6f40","project":4506373742657536,"release":"4a0848a2d0d5daf35f03fdd8168a8115101e13db","dist":null,"platform":"python","message":"","datetime":"2023-12-11T17:46:08+00:00","tags":[["browser","Google Chrome 118"],["browser.name","Google Chrome"],["client_os.name","macOS"],["device","Mac"],["device.family","Mac"],["environment","production"],["handled","no"],["level","error"],["mechanism","flask"],["runtime","CPython 3.9.2"],["runtime.name","CPython"],["release","4a0848a2d0d5daf35f03fdd8168a8115101e13db"],["server_name","cs-1039191608401-default"],["transaction","air"],["url","http://127.0.0.1:5000/air"]],"_meta":{"exception":{"values":{"0":{"stacktrace":{"frames":{"0":{"vars":{"environ":{"":{"len":39}}}},"10":{"vars":{"":{"len":15},"config":{"":{"len":25},"SECRET_KEY":{"":{"rem":[["@password:filter","s",0,10]],"len":40}}}}},"11":{"vars":{"":{"len":15},"config":{"":{"len":25},"SECRET_KEY":{"":{"rem":[["@password:filter","s",0,10]],"len":40}}}}},"4":{"vars":{"data":{"":{"rem":[["!limit","x",1021,1024]],"len":8999}}}},"5":{"vars":{"context":{"data":{"":{"rem":[["!limit","x",1021,1024]],"len":8999}}}}},"6":{"vars":{"context":{"data":{"":{"rem":[["!limit","x",1021,1024]],"len":8999}}}}},"7":{"vars":{"":{"len":4},"args":{"0":{"data":{"":{"rem":[["!limit","x",1021,1024]],"len":8999}}}},"ctx":{"":{"len":15},"config":{"":{"len":25},"SECRET_KEY":{"":{"rem":[["@password:filter","s",0,10]],"len":40}}},"cycler":{"":{"rem":[["!limit","s",1,4]],"len":29}}}}},"9":{"vars":{"":{"len":15},"config":{"":{"len":25},"SECRET_KEY":{"":{"rem":[["@password:filter","s",0,10]],"len":40}}}}}}}}}},"request":{"headers":{"4":{"1":{"":{"rem":[["!config","s"]]}}}}}},"_metrics":{"bytes.ingested.event":28562,"bytes.stored.event":33162},"contexts":{"browser":{"name":"Google Chrome","version":"118","type":"browser"},"client_os":{"name":"macOS","type":"os"},"device":{"family":"Mac","model":"Mac","brand":"Apple","type":"device"},"runtime":{"name":"CPython","version":"3.9.2","build":"3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]","type":"runtime"},"trace":{"trace_id":"2cc265e2200b4be19b307e820e4a0166","span_id":"beb4718310777acf","op":"http.server","status":"unknown","client_sample_rate":1.0,"sampled":true,"type":"trace"}},"culprit":"air","environment":"production","exception":{"values":[{"type":"UndefinedError","value":"'row' is undefined","module":"jinja2.exceptions","stacktrace":{"frames":[{"function":"wsgi_app","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/app.py","lineno":1455,"pre_context":["        ctx = self.request_context(environ)","        error: BaseException | None = None","        try:","            try:","                ctx.push()"],"context_line":"                response = self.full_dispatch_request()","post_context":["            except Exception as e:","                error = e","                response = self.handle_exception(e)","            except:  # noqa: B001","                error = sys.exc_info()[1]"],"in_app":false,"vars":{"ctx":"<RequestContext 'http://127.0.0.1:5000/air' [GET] of app>","e":"UndefinedError(\"'row' is undefined\")","environ":{"REQUEST_METHOD":"'GET'","SERVER_SOFTWARE":"'Werkzeug/3.0.1'","werkzeug.socket":"<socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 5000), raddr=('127.0.0.1', 35966)>","wsgi.errors":"<_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>","wsgi.input":"<_io.BufferedReader name=6>","wsgi.multiprocess":"False","wsgi.multithread":"True","wsgi.run_once":"False","wsgi.url_scheme":"'http'","wsgi.version":["1","0"]},"error":"UndefinedError(\"'row' is undefined\")","self":"<Flask 'app'>","start_response":"functools.partial(<function _sentry_start_response at 0x7f7a1d68c8b0>, <function WSGIRequestHandler.run_wsgi.<locals>.start_response at 0x7f7a1c1490d0>, <Transaction(name='air', op='http.server', trace_id='2cc265e2200b4be19b307e820e4a0166', span_id='beb4718310777acf', parent_span_id=None, sampled=True, source='component')>)"}},{"function":"full_dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/app.py","lineno":869,"pre_context":["            request_started.send(self, _async_wrapper=self.ensure_sync)","            rv = self.preprocess_request()","            if rv is None:","                rv = self.dispatch_request()","        except Exception as e:"],"context_line":"            rv = self.handle_user_exception(e)","post_context":["        return self.finalize_request(rv)","","    def finalize_request(","        self,","        rv: ft.ResponseReturnValue | HTTPException,"],"in_app":false,"vars":{"rv":"None","self":"<Flask 'app'>"}},{"function":"full_dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/app.py","lineno":867,"pre_context":["","        try:","            request_started.send(self, _async_wrapper=self.ensure_sync)","            rv = self.preprocess_request()","            if rv is None:"],"context_line":"                rv = self.dispatch_request()","post_context":["        except Exception as e:","            rv = self.handle_user_exception(e)","        return self.finalize_request(rv)","","    def finalize_request("],"in_app":false,"vars":{"rv":"None","self":"<Flask 'app'>"}},{"function":"dispatch_request","module":"flask.app","filename":"flask/app.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/app.py","lineno":852,"pre_context":["            and req.method == \"OPTIONS\"","        ):","            return self.make_default_options_response()","        # otherwise dispatch to the handler for that endpoint","        view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]"],"context_line":"        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)","post_context":["","    def full_dispatch_request(self) -> Response:","        \"\"\"Dispatches the request and on top of that performs request","        pre and postprocessing as well as HTTP exception catching and","        error handling."],"in_app":false,"vars":{"req":"<Request 'http://127.0.0.1:5000/air' [GET]>","rule":"<Rule '/air' (OPTIONS, GET, HEAD) -> air>","self":"<Flask 'app'>","view_args":{}}},{"function":"air","module":"__main__","filename":"app.py","abs_path":"/home/susan_chen/flask_e2e_project/app/app.py","lineno":63,"pre_context":["","df = pd.read_csv('/home/susan_chen/flask_e2e_project/data/cleaned_air_quality.csv')","@app.route('/air')","def air():","    data = df.sample(50)"],"context_line":"    return render_template('air.html', data=data)","post_context":["","","@app.route('/sql')","def sql():","    # Establish a database connection"],"in_app":true,"vars":{"data":"       unique_id  indicator_id                                             name                               measure  ...          time_period  start_date  data_value message\n1439      176526           375                           Nitrogen dioxide (NO2)                                  Mean  ...  Annual Average 2009  2008-12-01       27.13     NaN\n3251      169351           365                          Fine particles (PM 2.5)                                  Mean  ...          Summer 2010  2010-06-01       12.85     NaN\n3794      179655           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 2011  2010-12-01       11.94     NaN\n3280      175949           375                           Nitrogen dioxide (NO2)                                  Mean  ...          Summer 2010  2010-06-01       20.91     NaN\n8972      334258           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 20..."}},{"function":"render_template","module":"flask.templating","filename":"flask/templating.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/templating.py","lineno":152,"pre_context":["        a list is given, the first name to exist will be rendered.","    :param context: The variables to make available in the template.","    \"\"\"","    app = current_app._get_current_object()  # type: ignore[attr-defined]","    template = app.jinja_env.get_or_select_template(template_name_or_list)"],"context_line":"    return _render(app, template, context)","post_context":["","","def render_template_string(source: str, **context: t.Any) -> str:","    \"\"\"Render a template from the given source string with the given","    context."],"in_app":false,"vars":{"app":"<Flask 'app'>","context":{"data":"       unique_id  indicator_id                                             name                               measure  ...          time_period  start_date  data_value message\n1439      176526           375                           Nitrogen dioxide (NO2)                                  Mean  ...  Annual Average 2009  2008-12-01       27.13     NaN\n3251      169351           365                          Fine particles (PM 2.5)                                  Mean  ...          Summer 2010  2010-06-01       12.85     NaN\n3794      179655           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 2011  2010-12-01       11.94     NaN\n3280      175949           375                           Nitrogen dioxide (NO2)                                  Mean  ...          Summer 2010  2010-06-01       20.91     NaN\n8972      334258           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 20...","g":"<flask.g of 'app'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","sentry_trace":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","sentry_trace_meta":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","session":{"nonce":"'z7uwYyHI0e4NZ8YT6IoaeWapLuRS38'"}},"template":"<Template 'air.html'>","template_name_or_list":"'air.html'"}},{"function":"_render","module":"flask.templating","filename":"flask/templating.py","abs_path":"/usr/local/lib/python3.9/dist-packages/flask/templating.py","lineno":133,"pre_context":["def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:","    app.update_template_context(context)","    before_render_template.send(","        app, _async_wrapper=app.ensure_sync, template=template, context=context","    )"],"context_line":"    rv = template.render(context)","post_context":["    template_rendered.send(","        app, _async_wrapper=app.ensure_sync, template=template, context=context","    )","    return rv",""],"in_app":false,"vars":{"app":"<Flask 'app'>","context":{"data":"       unique_id  indicator_id                                             name                               measure  ...          time_period  start_date  data_value message\n1439      176526           375                           Nitrogen dioxide (NO2)                                  Mean  ...  Annual Average 2009  2008-12-01       27.13     NaN\n3251      169351           365                          Fine particles (PM 2.5)                                  Mean  ...          Summer 2010  2010-06-01       12.85     NaN\n3794      179655           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 2011  2010-12-01       11.94     NaN\n3280      175949           375                           Nitrogen dioxide (NO2)                                  Mean  ...          Summer 2010  2010-06-01       20.91     NaN\n8972      334258           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 20...","g":"<flask.g of 'app'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","sentry_trace":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","sentry_trace_meta":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","session":{"nonce":"'z7uwYyHI0e4NZ8YT6IoaeWapLuRS38'"}},"template":"<Template 'air.html'>"}},{"function":"render","module":"jinja2.environment","filename":"jinja2/environment.py","abs_path":"/usr/local/lib/python3.9/dist-packages/jinja2/environment.py","lineno":1301,"pre_context":["        ctx = self.new_context(dict(*args, **kwargs))","","        try:","            return self.environment.concat(self.root_render_func(ctx))  # type: ignore","        except Exception:"],"context_line":"            self.environment.handle_exception()","post_context":["","    async def render_async(self, *args: t.Any, **kwargs: t.Any) -> str:","        \"\"\"This works similar to :meth:`render` but returns a coroutine","        that when awaited returns the entire rendered template string.  This","        requires the async feature to be enabled."],"in_app":false,"vars":{"args":[{"data":"       unique_id  indicator_id                                             name                               measure  ...          time_period  start_date  data_value message\n1439      176526           375                           Nitrogen dioxide (NO2)                                  Mean  ...  Annual Average 2009  2008-12-01       27.13     NaN\n3251      169351           365                          Fine particles (PM 2.5)                                  Mean  ...          Summer 2010  2010-06-01       12.85     NaN\n3794      179655           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 2011  2010-12-01       11.94     NaN\n3280      175949           375                           Nitrogen dioxide (NO2)                                  Mean  ...          Summer 2010  2010-06-01       20.91     NaN\n8972      334258           365                          Fine particles (PM 2.5)                                  Mean  ...  Annual Average 20...","g":"<flask.g of 'app'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","sentry_trace":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","sentry_trace_meta":"Markup('<meta name=\"sentry-trace\" content=\"2cc265e2200b4be19b307e820e4a0166-beb4718310777acf-1\"><meta name=\"baggage\" content=\"sentry-trace_id=2cc265e2200b4be19b307e820e4a0166,sentry-environment=production,sentry-release=4a0848a2d0d5daf35f03fdd8168a8115101e13db,sentry-public_key=826f9a57f816daf5c766b02699963c0c,sentry-transaction=air,sentry-sample_rate=1.0,sentry-sampled=true\">')","session":{"nonce":"'z7uwYyHI0e4NZ8YT6IoaeWapLuRS38'"}}],"ctx":{"config":{"APPLICATION_ROOT":"'/'","DEBUG":"True","PERMANENT_SESSION_LIFETIME":"datetime.timedelta(days=31)","PROPAGATE_EXCEPTIONS":"None","SECRET_KEY":"[Filtered]","SERVER_NAME":"None","SESSION_COOKIE_DOMAIN":"None","SESSION_COOKIE_NAME":"'session'","TESTING":"False","USE_X_SENDFILE":"False"},"cycler":"<..."}}},{"function":"handle_exception","module":"jinja2.environment","filename":"jinja2/environment.py","abs_path":"/usr/local/lib/python3.9/dist-packages/jinja2/environment.py","lineno":936,"pre_context":["        \"\"\"Exception handling helper.  This is used internally to either raise","        rewritten exceptions or return a rendered traceback for the template.","        \"\"\"","        from .debug import rewrite_traceback_stack",""],"context_line":"        raise rewrite_traceback_stack(source=source)","post_context":["","    def join_path(self, template: str, parent: str) -> str:","        \"\"\"Join a template with the parent.  By default all the lookups are","        relative to the loader root so this method returns the `template`","        parameter unchanged, but if the paths should be relative to the"],"in_app":false,"vars":{"rewrite_traceback_stack":"<function rewrite_traceback_stack at 0x7f7a1c697d30>","self":"<flask.templating.Environment object at 0x7f7a1c76aee0>","source":"None"}},{"function":"top-level template code","module":"/home/susan_chen/flask_e2e_project/app/templates/air.html","filename":"/home/susan_chen/flask_e2e_project/app/templates/air.html","abs_path":"/home/susan_chen/flask_e2e_project/app/templates/air.html","lineno":1,"context_line":"{% extends \"index.html\" %} ","post_context":["","{% block content %}","    <div class=\"table\">","        <h2 class=\"text-xl center-text bold-text\">Air Quality Data in NYC</h2>","        <br>        "],"in_app":true,"vars":{"config":{"APPLICATION_ROOT":"'/'","DEBUG":"True","PERMANENT_SESSION_LIFETIME":"datetime.timedelta(days=31)","PROPAGATE_EXCEPTIONS":"None","SECRET_KEY":"[Filtered]","SERVER_NAME":"None","SESSION_COOKIE_DOMAIN":"None","SESSION_COOKIE_NAME":"'session'","TESTING":"False","USE_X_SENDFILE":"False"},"cycler":"<class 'jinja2.utils.Cycler'>","dict":"<class 'dict'>","get_flashed_messages":"<function get_flashed_messages at 0x7f7a2c51b040>","joiner":"<class 'jinja2.utils.Joiner'>","lipsum":"<function generate_lorem_ipsum at 0x7f7a2c4ae700>","namespace":"<class 'jinja2.utils.Namespace'>","range":"<class 'range'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","url_for":"<bound method Flask.url_for of <Flask 'app'>>"}},{"function":"top-level template code","module":"/home/susan_chen/flask_e2e_project/app/templates/index.html","filename":"/home/susan_chen/flask_e2e_project/app/templates/index.html","abs_path":"/home/susan_chen/flask_e2e_project/app/templates/index.html","lineno":30,"pre_context":["            </ul>","        </nav>","    </header>","","    <main class=\"p-4\">"],"context_line":"        {% block content %}","post_context":["       This Flask App displays data on the air quality in NYC from  information. ","       {% endblock %}","    </main>","","    <footer class=\"bg-blue-600 text-white p-4 mt-6\">"],"in_app":true,"vars":{"config":{"APPLICATION_ROOT":"'/'","DEBUG":"True","PERMANENT_SESSION_LIFETIME":"datetime.timedelta(days=31)","PROPAGATE_EXCEPTIONS":"None","SECRET_KEY":"[Filtered]","SERVER_NAME":"None","SESSION_COOKIE_DOMAIN":"None","SESSION_COOKIE_NAME":"'session'","TESTING":"False","USE_X_SENDFILE":"False"},"cycler":"<class 'jinja2.utils.Cycler'>","dict":"<class 'dict'>","get_flashed_messages":"<function get_flashed_messages at 0x7f7a2c51b040>","joiner":"<class 'jinja2.utils.Joiner'>","lipsum":"<function generate_lorem_ipsum at 0x7f7a2c4ae700>","namespace":"<class 'jinja2.utils.Namespace'>","range":"<class 'range'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","url_for":"<bound method Flask.url_for of <Flask 'app'>>"}},{"function":"block 'content'","module":"/home/susan_chen/flask_e2e_project/app/templates/air.html","filename":"/home/susan_chen/flask_e2e_project/app/templates/air.html","abs_path":"/home/susan_chen/flask_e2e_project/app/templates/air.html","lineno":29,"pre_context":["                </tr>","            </thead>","            <tbody>","                {% for col in data.columns %}","                <tr>"],"context_line":"                    <td class=\"border px-4 py-2\">{{ col.unique_id }}</td>","post_context":["                    <td class=\"border px-4 py-2\">{{ row['indicator_id'] }}</td>","                    <td class=\"border px-4 py-2\">{{ data['name'] }}</td>","                    <td class=\"border px-4 py-2\">{{ data['measure'] }}</td>","                    <td class=\"border px-4 py-2\">{{ data['measure_info'] }}</td>","                    <td class=\"border px-4 py-2\">{{ data['geo_type_name'] }}</td>"],"in_app":true,"vars":{"config":{"APPLICATION_ROOT":"'/'","DEBUG":"True","PERMANENT_SESSION_LIFETIME":"datetime.timedelta(days=31)","PROPAGATE_EXCEPTIONS":"None","SECRET_KEY":"[Filtered]","SERVER_NAME":"None","SESSION_COOKIE_DOMAIN":"None","SESSION_COOKIE_NAME":"'session'","TESTING":"False","USE_X_SENDFILE":"False"},"cycler":"<class 'jinja2.utils.Cycler'>","dict":"<class 'dict'>","get_flashed_messages":"<function get_flashed_messages at 0x7f7a2c51b040>","joiner":"<class 'jinja2.utils.Joiner'>","lipsum":"<function generate_lorem_ipsum at 0x7f7a2c4ae700>","namespace":"<class 'jinja2.utils.Namespace'>","range":"<class 'range'>","request":"<Request 'http://127.0.0.1:5000/air' [GET]>","url_for":"<bound method Flask.url_for of <Flask 'app'>>"}},{"function":"getattr","module":"jinja2.environment","filename":"jinja2/environment.py","abs_path":"/usr/local/lib/python3.9/dist-packages/jinja2/environment.py","lineno":485,"pre_context":["    def getattr(self, obj: t.Any, attribute: str) -> t.Any:","        \"\"\"Get an item or attribute of an object but prefer the attribute.","        Unlike :meth:`getitem` the attribute *must* be a string.","        \"\"\"","        try:"],"context_line":"            return getattr(obj, attribute)","post_context":["        except AttributeError:","            pass","        try:","            return obj[attribute]","        except (TypeError, LookupError, AttributeError):"],"in_app":false,"vars":{"attribute":"'unique_id'","obj":"Undefined","self":"<flask.templating.Environment object at 0x7f7a1c76aee0>"}}]},"mechanism":{"type":"flask","handled":false}}]},"extra":{"sys.argv":["/home/susan_chen/flask_e2e_project/app/app.py"]},"fingerprint":["{{ default }}"],"grouping_config":{"enhancements":"eJybzDRxc15qeXFJZU6qlZGBkbGugaGuoeEEAHJMCAM","id":"newstyle:2023-01-11"},"hashes":["3e4006234fd197d22bedd29e3661e61d","76a356ea0a71f514997e48472bc4e01b"],"ingest_path":[{"version":"23.11.2","public_key":"XE7QiyuNlja9PZ7I9qJlwQotzecWrUIN91BAO7Q5R38"}],"key_id":"3530147","level":"error","location":"/home/susan_chen/flask_e2e_project/app/templates/air.html","logger":"","metadata":{"display_title_with_tree_label":false,"filename":"/home/susan_chen/flask_e2e_project/app/templates/air.html","function":"block 'content'","in_app_frame_mix":"mixed","type":"UndefinedError","value":"'row' is undefined"},"modules":{"absl-py":"2.0.0","alembic":"1.12.0","anyio":"3.6.2","appdirs":"1.4.4","asgiref":"3.7.2","astroid":"3.0.1","asttokens":"2.4.1","astunparse":"1.6.3","attrs":"23.1.0","authlib":"1.2.1","autopep8":"1.5.5","azure-functions":"1.17.0","bleach":"6.1.0","blinker":"1.6.2","cachelib":"0.10.2","cachetools":"5.3.2","certifi":"2023.11.17","cffi":"1.16.0","charset-normalizer":"3.3.2","click":"8.1.7","cloudpickle":"3.0.0","contourpy":"1.1.1","crcmod":"1.7","cryptography":"41.0.7","cycler":"0.11.0","dbus-python":"1.2.16","decorator":"5.1.1","dill":"0.3.7","distlib":"0.3.7","django":"4.2.7","dnspython":"2.4.2","email-validator":"2.0.0.post1","exceptiongroup":"1.2.0","executing":"2.0.1","faker":"19.6.2","fastapi":"0.95.1","filelock":"3.13.1","flake8":"3.8.4","flasgger":"0.9.7.1","flask":"3.0.0","flask-pymongo":"2.3.0","flask-session":"0.5.0","flatbuffers":"23.5.26","fonttools":"4.42.1","gast":"0.5.4","gce-v2v":"0.0.0","git-lfs":"1.6","google-api-core":"2.14.0","google-api-python-client":"2.108.0","google-auth":"2.23.4","google-auth-httplib2":"0.1.1","google-auth-oauthlib":"1.1.0","google-cloud-appengine-logging":"1.3.2","google-cloud-audit-log":"0.2.5","google-cloud-bigquery":"3.13.0","google-cloud-core":"2.3.3","google-cloud-datastore":"2.18.0","google-cloud-language":"2.11.1","google-cloud-logging":"3.8.0","google-cloud-spanner":"3.40.1","google-cloud-storage":"2.13.0","google-cloud-translate":"3.12.1","google-cloud-videointelligence":"2.11.4","google-cloud-vision":"3.4.5","google-crc32c":"1.5.0","google-pasta":"0.2.0","google-resumable-media":"2.6.0","googleapis-common-protos":"1.61.0","greenlet":"2.0.2","grpc-google-iam-v1":"0.12.7","grpcio":"1.59.3","grpcio-status":"1.59.3","gunicorn":"20.1.0","h11":"0.14.0","h5py":"3.10.0","htmltools":"0.3.0","httpcore":"0.17.0","httplib2":"0.22.0","httptools":"0.5.0","httpx":"0.24.0","idna":"3.6","imageio":"2.32.0","importlib-metadata":"6.8.0","importlib-resources":"6.1.0","ipython":"8.18.1","isort":"5.12.0","itsdangerous":"2.1.2","jaraco.classes":"3.3.0","jedi":"0.17.0","jeepney":"0.8.0","jinja2":"3.1.2","joblib":"1.3.2","jsonschema":"4.20.0","jsonschema-specifications":"2023.11.1","keras":"2.15.0","keyring":"24.3.0","keyrings.google-artifactregistry-auth":"1.1.2","kiwisolver":"1.4.5","lazy-object-proxy":"1.6.0","lazy_loader":"0.3","libclang":"16.0.6","lime":"0.2.0.1","linkify-it-py":"2.0.2","llvmlite":"0.41.1","load-dotenv":"0.1.0","mako":"1.2.4","markdown":"3.5.1","markdown-it-py":"3.0.0","markupsafe":"2.1.3","matplotlib":"3.8.0","matplotlib-inline":"0.1.6","mccabe":"0.6.1","mdit-py-plugins":"0.4.0","mdurl":"0.1.2","mercurial":"5.6.1","mistune":"3.0.2","ml-dtypes":"0.2.0","more-itertools":"10.1.0","mypy":"1.7.1","mypy-extensions":"1.0.0","mysql-connector-python":"8.1.0","networkx":"3.2.1","numba":"0.58.1","numpy":"1.26.2","oauth2client":"4.1.3","oauthlib":"3.2.2","opt-einsum":"3.3.0","orjson":"3.8.10","packaging":"23.2","pandas":"2.0.3","parso":"0.8.3","pexpect":"4.9.0","pillow":"10.0.1","pip":"20.3.4","platformdirs":"4.0.0","pluggy":"1.3.0","prompt-toolkit":"3.0.41","proto-plus":"1.22.3","protobuf":"4.21.12","psycopg2":"2.9.9","ptyprocess":"0.7.0","pure-eval":"0.2.2","pyasn1":"0.5.1","pyasn1-modules":"0.3.0","pycodestyle":"2.6.0","pycparser":"2.21","pycurl":"7.43.0.6","pydantic":"1.10.7","pydocstyle":"6.3.0","pyflakes":"2.2.0","pygments":"2.17.2","pygobject":"3.38.0","pylint":"3.0.2","pyls-mypy":"0.1.8","pymongo":"4.6.0","pymysql":"1.1.0","pyparsing":"3.1.1","python-apt":"2.2.1","python-dateutil":"2.8.2","python-dotenv":"1.0.0","python-jsonrpc-server":"0.4.0","python-language-server":"0.35.1","python-multipart":"0.0.6","pytoolconfig":"1.2.6","pytz":"2023.3","pyyaml":"6.0.1","referencing":"0.31.0","requests":"2.31.0","requests-oauthlib":"1.3.1","rope":"1.11.0","rpds-py":"0.13.1","rsa":"4.9","scikit-image":"0.22.0","scikit-learn":"1.3.2","scipy":"1.11.3","secretstorage":"3.3.3","sentry-sdk":"1.38.0","setuptools":"69.0.2","shap":"0.43.0","shiny":"0.5.1","six":"1.16.0","slicer":"0.0.7","sniffio":"1.3.0","snowballstemmer":"2.2.0","sqlalchemy":"2.0.19","sqlparse":"0.4.4","stack-data":"0.6.3","starlette":"0.26.1","supervisor":"4.2.2","tensorboard":"2.15.1","tensorboard-data-server":"0.7.2","tensorflow":"2.15.0","tensorflow-estimator":"2.15.0","tensorflow-io-gcs-filesystem":"0.34.0","termcolor":"2.3.0","threadpoolctl":"3.2.0","tifffile":"2023.9.26","toml":"0.10.2","tomli":"2.0.1","tomlkit":"0.12.3","tqdm":"4.66.1","traitlets":"5.14.0","typing_extensions":"4.8.0","tzdata":"2023.3","uc-micro-py":"1.0.2","ujson":"5.8.0","uritemplate":"4.1.1","urllib3":"2.1.0","uvicorn":"0.21.1","uvloop":"0.17.0","virtualenv":"20.24.7","watchfiles":"0.19.0","wcwidth":"0.2.12","webencodings":"0.5.1","websockets":"11.0.1","werkzeug":"3.0.1","wheel":"0.34.2","wrapt":"1.14.1","xgboost":"2.0.2","yapf":"0.40.2","zipp":"3.17.0"},"nodestore_insert":1702316774.600555,"received":1702316768.255957,"request":{"url":"http://127.0.0.1:5000/air","method":"GET","headers":[["Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],["Accept-Encoding","gzip, deflate, br"],["Accept-Language","en-US,en;q=0.9"],["Cache-Control","max-age=0"],["Cookie","[Filtered]"],["Host","127.0.0.1:5000"],["Referer","https://5000-cs-1039191608401-default.cs-us-east1-vpcf.cloudshell.dev/air"],["Sec-Ch-Ua","\"Chromium\";v=\"118\", \"Google Chrome\";v=\"118\", \"Not=A?Brand\";v=\"99\""],["Sec-Ch-Ua-Mobile","?0"],["Sec-Ch-Ua-Platform","\"macOS\""],["Sec-Fetch-Dest","document"],["Sec-Fetch-Mode","navigate"],["Sec-Fetch-Site","same-origin"],["Sec-Fetch-User","?1"],["Upgrade-Insecure-Requests","1"],["User-Agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"],["X-Forwarded-Host","5000-cs-1039191608401-default.cs-us-east1-vpcf.cloudshell.dev"]],"env":{"SERVER_NAME":"0.0.0.0","SERVER_PORT":"5000"}},"sdk":{"name":"sentry.python.django","version":"1.38.0","integrations":["argv","atexit","dedupe","django","excepthook","fastapi","flask","httpx","logging","modules","sqlalchemy","starlette","stdlib","threading"],"packages":[{"name":"pypi:sentry-sdk","version":"1.38.0"}]},"timestamp":1702316768.118587,"title":"UndefinedError: 'row' is undefined","transaction":"air","transaction_info":{"source":"component"},"type":"error","version":"7"}